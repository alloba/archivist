interface MediaSourceInterface {
    name: string // human-readable name of the media source object
    description: string // description of the source object
    type: string // unique source type for this class. (4chan/fs/etc)

    path: string // subpath that is meant to be used for scans on this source. the meaning of subpath can get a bit creative depending on the source.
    params: object // additional params that are needed by the source. This can vary depending on the type, so it's left vague here.

    verifyParamsFunction: MediaSourceVerifyParamsFunc // verify properties of this object. This is meant to throw an exception if something is wrong.
    searchFunction: MediaSourceSearchFunc // function that will be used to perform searches with this source
    downloadFunction: MediaSourceDownloadFunc // function used to download a particular result that was generated by this source
}

interface MediaSearchResult {
    path: string // this can mean slightly different things depending on the source, but generally the location that holds the actual data for the media. URL or network path or similar.
    meta: object // not sure if I can get more specific than this. Additional information that comes from search results.
    getHashFunction: MediaSearchResultHashFunction // md5 hash for object. This is technically metadata, but it's mandatory information. So im calling it out separately.
}

interface MediaSourceVerifyParamsFunc {
    (params: object): void  // validate params for the source interface. raise exception if something fails
}

interface MediaSourceSearchFunc {
    (path: string, searchTerm: null | string): Array<MediaSearchResult>
}

interface MediaSourceDownloadFunc {
    (searchResult: MediaSearchResult, destination: string): void
}

interface MediaSearchResultHashFunction{
    (): string
}
